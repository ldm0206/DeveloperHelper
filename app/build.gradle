apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'//kapt 插件
apply from: "${rootDir}/common.gradle"

def signingProp = file(project.rootProject.file("signing.properties"))

android {
    signingConfigs {
        if (signingProp.exists()) {
            def properties = new Properties()
            properties.load(new FileInputStream(signingProp))
            create("key") {
                storeFile = rootProject.file(properties.getProperty("keystore.path"))
                storePassword = properties.getProperty("keystore.pwd")
                keyAlias = properties.getProperty("keystore.alias")
                keyPassword = properties.getProperty("keystore.alias_pwd")
            }
        }
    }
    namespace "com.wrbug.developerhelper"
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    if (isSignFileValid()) {
        signingConfigs {
            releaseConfig
        }
    }
    compileSdk 34
    defaultConfig {
        applicationId "com.wrbug.developerhelper"
        minSdkVersion 23
        targetSdkVersion 34
        versionCode 100040
        versionName "1.0.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        ndk {
            abiFilters "arm64-v8a","x86_64"
        }
    }
    buildTypes {
        debug {
            versionNameSuffix "-debug"
            if (isSignFileValid()) {
                signingConfig signingConfigs.releaseConfig
            }
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.7.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'net.dongliu:apk-parser:2.6.10'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    implementation 'com.google.code.gson:gson:2.10'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation 'com.github.yhaolpz:FloatWindow:1.0.9'
    kapt "com.android.databinding:compiler:3.1.4"
    implementation 'com.elvishew:xlog:1.6.1'
    implementation 'org.jetbrains.anko:anko-commons:0.10.8'
    implementation 'com.airbnb.android:lottie:6.5.2'
    // https://mvnrepository.com/artifact/dom4j/dom4j
    implementation 'dom4j:dom4j:1.6.1'
    implementation 'com.drakeet.multitype:multitype:4.3.0'
    implementation 'com.evrencoskun.library:tableview:0.8.8'
    implementation 'com.yanzhenjie.recyclerview:x:1.3.2'
    implementation 'gdut.bsx:share2:0.9.3'
    implementation 'de.blox:graphview:0.5.0'
    implementation 'com.github.bumptech.glide:glide:4.16.0'
    implementation "com.google.android.material:material:1.12.0"
    implementation 'com.github.vipulasri:timelineview:1.1.5'
    implementation project(':ipc')
    implementation project(':commonutil')
    implementation project(':mmkv')
}
kapt {
    generateStubs = true
}


Properties props = new Properties()
def propFile = file('../signing.properties')
if (propFile.canRead()) {
    props.load(new FileInputStream(propFile))
    if (props != null &&
            props.containsKey('SIGN_FILE') && props.containsKey('SIGN_PASSWORD') &&
            props.containsKey('KEY_ALIAS') && props.containsKey('KEY_PASSWORD')) {
        android.signingConfigs.releaseConfig.storeFile = file(props['SIGN_FILE'])
        android.signingConfigs.releaseConfig.storePassword = props['SIGN_PASSWORD']
        android.signingConfigs.releaseConfig.keyAlias = props['KEY_ALIAS']
        android.signingConfigs.releaseConfig.keyPassword = props['KEY_PASSWORD']
    } else {
        println 'release build not found signing properties'
        android.buildTypes.release.signingConfig = null
    }
} else {
    println 'release build not found signing file'
    android.buildTypes.release.signingConfig = null
}

def isSignFileValid() {
    return file('../signing.properties').canRead()
}
